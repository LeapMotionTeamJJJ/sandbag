<!DOCTYPE html>
<!-- http://uectf.jp/member/kenji/leapmotion/Leap%20Motion%20JJJ.htm-->
<!-- saved from url=(0047)http://js.leapmotion.com/examples/replayer.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Leap Motion Replayer</title>
    <meta charset="utf-8">
    <script src="./sample_files/leap.min.js"></script>
    <script src="http://d3js.org/d3.v3.js"></script>

    <style>
      *,*:before,*:after {
        margin: 0;
        padding: 0;
        border: 0;
        -webkit-box-sizing: border-box;
      }
      button {
        padding: .5em;
      }
      #app {
        position: absolute;
        width: 100%;
        height: 100%;
        font-size: 200%;
        overflow: hidden;
        background-color: #101010;
        -webkit-perspective: 1000;
      }
      #scene,
      #scene:before {
        position: absolute;
        left: 50%;
        top: 50%;
        width: 40em;
        height: 40em;
        margin: -20em 0 0 -20em;
        border: 4px solid #A0A0A0;
        background-color: rgba(255,255,255,.1);
        background-image:
        -webkit-linear-gradient(rgba(255,255,255,.4) .1em, transparent .1em),
        -webkit-linear-gradient(0deg, rgba(255,255,255,.4) .1em, transparent .1em),
        -webkit-linear-gradient(rgba(255,255,255,.3) .05em, transparent .05em),
        -webkit-linear-gradient(0deg, rgba(255,255,255,.3) .05em, transparent .05em);
        background-size: 5em 5em, 5em 5em, 1em 1em, 1em 1em;
        background-position: -.1em -.1em, -.1em -.1em, -.05em -.05em, -.05em -.05em;
        -webkit-transform-style: preserve-3d;
        -webkit-transform: rotateX(75deg);
      }
      #scene {
        -webkit-transform: rotateX(45deg);
      }
      #scene:before {
        content: '';
        -webkit-transform: rotateX(90deg) translateZ(19.5em) translateY(20em);
      }
      .cube {
        background-color: red;
        -webkit-transform-style: preserve-3d;
        -webkit-transform: translateX(19.5em) translateY(19.5em) translateZ(0em);
      }
      .finger,
      .sphere {
        position: absolute;
        left: 50%;
        top: 50%;
        width: 1em;
        height: 1em;
        margin: -.5em 0 0 -.5em;
        -webkit-transform-style: preserve-3d;
        -webkit-transform: translateX(14.5em) translateY(14.5em) translateZ(0);
      }

      .finger {
        opacity: .8;
        height: 3em;
      }

      .sphere {
        opacity: .3;
        display: none;
        font-size: 100px;
      }

      .show-hands .sphere {
        display: block;
      }

      .face {
        position: absolute;
        width: 1em;
        height: 1em;
        background-color: inherit;
        -webkit-transform-style: preserve-3d;
        -webkit-transform-origin: 0 0;
        -webkit-box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
      }
      
      .face2 {
        position: absolute;
        width: 1.5em;
        height: 6em;
        background-color: inherit;
        -webkit-transform-style: preserve-3d;
        transform-style: preserve-3d;
        -webkit-transform-origin: 0 0;
        transform-origin: 0 0;
        -webkit-box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
        box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
      }

      .face3 {
        position: absolute;
        width: 1.5em;
        height: 1em;
        background-color: inherit;
        -webkit-transform-style: preserve-3d;
        transform-style: preserve-3d;
        -webkit-transform-origin: 0 0;
        transform-origin: 0 0;
        -webkit-box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
        box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
      }

      .face4 {
        position: absolute;
        width: 1em;
        height: 3em;
        background-color: inherit;
        -webkit-transform-style: preserve-3d;
        transform-style: preserve-3d;
        -webkit-transform-origin: 0 0;
        transform-origin: 0 0;
        -webkit-box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
        box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
      }

      .face5 {
        position: absolute;
        width: 1em;
        height: 3em;
        background-color: inherit;
        -webkit-transform-style: preserve-3d;
        transform-style: preserve-3d;
        -webkit-transform-origin: 0 0;
        transform-origin: 0 0;
        -webkit-box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
        box-shadow: inset 0 0 0 1px rgba(255,255,255,.9);
      }
      
      .cube .face.tp { -webkit-transform: translateZ(1em); }
      .cube .face.ft { -webkit-transform: rotateX(90deg) translateZ(-1em); }
      .cube .face.bk { -webkit-transform: rotateX(90deg); }
      .cube .face.lt { -webkit-transform: rotateY(90deg) translateX(-1em); }
      .cube .face.rt { -webkit-transform: rotateY(90deg) translateX(-1em) translateZ(1em); }

      .finger .face.tp { -webkit-transform: translateZ(1em); height: 3em; }
      .finger .face.ft { -webkit-transform: rotateX(90deg) translateZ(-3em); }
      .finger .face.bk { -webkit-transform: rotateX(90deg); }
      .finger .face.lt { -webkit-transform: rotateY(90deg) translateX(-1em); height: 3em;}
      .finger .face.rt { -webkit-transform: rotateY(90deg) translateX(-1em) translateZ(1em); height: 3em;}
      
      .whitekey {
  	background-color: white;
        -webkit-transform-style: preserve-3d;
        transform-style: preserve-3d;
        -webkit-transform: translate3d(6.0em, 19.5em, 0em);
        transform: translate3d(6.0em, 19.5em, 0em);
      }

      .whitekey .face2.tp {
         -webkit-transform: translate3d(0, -5em, 1em);
      }
      
      .whitekey .face3.ft {
        -webkit-transform: rotate3d(1, 0, 0, 90deg) translate3d(0, 0, -1em);
        transform: rotate3d(1, 0, 0, 90deg) translate3d(0, 0, -1em);
      }

      .whitekey .face.ft {
        -webkit-transform: rotate3d(1, 0, 0, 90deg) translate3d(0, 0, -1em);
        transform: rotate3d(1, 0, 0, 90deg) translate3d(0, 0, -1em);
      }

      .blackkey {
        background-color: black;
        -webkit-transform-style: preserve-3d;
        transform-style: preserve-3d;
        -webkit-transform: translate3d(6.0em, 16.0em, 1em);
        transform: translate3d(6.0em, 19.5em, 0em);
      }

      .blackkey .face3.tp {
         -webkit-transform: translate3d(0, -2em, 1em);
      }
      
      .blackkey .face4.tp {
         -webkit-transform: translate3d(0, -2em, 1em);
      }

      .blackkey .face.ft {
        -webkit-transform: rotate3d(1, 0, 0, 90deg) translate3d(0, 0, -1em);
        transform: rotate3d(1, 0, 0, 90deg) translate3d(0, 0, -1em);
      }

    </style>
  <style>[touch-action="none"]{ -ms-touch-action: none; touch-action: none; }[touch-action="pan-x"]{ -ms-touch-action: pan-x; touch-action: pan-x; }[touch-action="pan-y"]{ -ms-touch-action: pan-y; touch-action: pan-y; }[touch-action="scroll"],[touch-action="pan-x pan-y"],[touch-action="pan-y pan-x"]{ -ms-touch-action: pan-x pan-y; touch-action: pan-x pan-y; }</style></head>
  
  
  <body>
    <div id="app" class="show-hands">
  
      <button id="showHands">Show Hands</button>
      <button id="hideHands">hide Hands</button>
  
      <div id="scene">
          //ピアノ描画スクリプト 熊谷
          <script>
            for(i = 0; i < 22 ; i++){
                document.write("<div id='whitekey" + i + "' class='whitekey'><div class='face2 tp'></div><div class='face3 ft'></div></div>");
                var number = document.getElementById("whitekey" + i);

                var keyX = 1.5 * i + 3.5;

                var keyStyle = number.style;
                keyStyle.transform =
                keyStyle.webkitTransform = 'translate3d(' + keyX + 'em, 17.0em, 0em)';

                if(i == 2 || i == 6 || i == 9 || i == 13 || i == 16 || i == 20 || i == 21){
                  continue;
                }else{
                  document.write("<div id='blackkey" + i + "' class='blackkey'><div class='face4 tp'></div><div class='face ft'></div></div>");
                  var number = document.getElementById("blackkey" + i);

                  var keyX = 1.5 * i + 4.5;

                  var keyStyle = number.style;
                  keyStyle.transform =
                  keyStyle.webkitTransform = 'translate3d(' + keyX + 'em, 13.5em, 1em)';
                }
              }

          </script>
      
        <div id="finger" class="cube finger">
          <div class="face tp"></div>
          <div class="face lt"></div>
          <div class="face rt"></div>
          <div class="face ft"></div>
          <div class="face bk"></div>
        </div>
        <div id="sphere" class="cube sphere">
          <div class="face tp"></div>
          <div class="face lt"></div>
          <div class="face rt"></div>
          <div class="face ft"></div>
          <div class="face bk"></div>
        </div>
  <!--<div id="cube" class="cube">
          <div class="face tp"></div>
          <div class="face lt"></div>
          <div class="face rt"></div>
          <div class="face ft"></div>
          <div class="face bk"></div>
        </div>-->
    </div>
</body>

    <script>
  /**************ここから マスターハンド用********/
      var master_leap = new Leap.Controller({}); //for master_leap
	  var duration,step;
  
      function simulateGesture(data) {
        var last = data.length-1;
        var i = 0;
         duration = (data[last].timestamp - data[0].timestamp)/1000; //モーション移動速度の変更はここ
         step = duration/data.length;
     //print
     console.log("duration:"+duration);
     console.log("step:"+step);
     console.log("data_size:"+data.length);
    
        function run() {//自動ループ
          if (i == last) return;
          var ghost_frame = new Leap.Frame(data[i]);
          //window.alert(i);
          master_leap.processFrame(ghost_frame);//master_leap.onへ遷移
          i++;
          setTimeout(run, step);
      //step時間後にrun()を呼び出す
      //記録するときの1フレームの長さは可変．しかし，再生するときの1フレームの再生時間は固定になってしまっている．
        };
        run();
      };

      function moveFinger(Finger, posX, posY, posZ, dirX, dirY, dirZ) {//for master_leap
        Finger.style.webkitTransform = "translateX("+posX+"px) translateY("+posY+"px) translateZ("+posZ+"px) rotateX("+dirX+"deg) rotateY(0deg) rotateZ("+dirZ+"deg)";
      }

      function moveSphere(Sphere, posX, posY, posZ, rotX, rotY, rotZ) {//for master_leap
        Sphere.style.webkitTransform = "translateX("+posX+"px) translateY("+posY+"px) translateZ("+posZ+"px) rotateX("+rotX+"deg) rotateY(0deg) rotateZ(0deg)";
      }

      var fingers = {};
      var spheres = {};
      master_leap.on("frame", function(frame) {
    //console.log(frame)
        var fingerIds = {}; 
        var handIds = {}; //現在認識している手のIDを格納
        if (frame.hands === undefined ) {
          var handsLength = 0
        } else {
          var handsLength = frame.hands.length;
        }

        for (var handId = 0, handCount = handsLength; handId != handCount; handId++) {
          var hand = frame.hands[handId];
		  var m_hand_id = 'm'+hand.id; //IDにマスターハンドを示すmを付加
          var posX = (hand.palmPosition[0]*3);
          var posY = (hand.palmPosition[2]*3)-200;
          var posZ = (hand.palmPosition[1]*3)-400;
          var rotX = (hand._rotation[2]*90);
          var rotY = (hand._rotation[1]*90);
          var rotZ = (hand._rotation[0]*90);
          var sphere = spheres[m_hand_id];
          if (!sphere) {
            var sphereDiv = document.getElementById("sphere").cloneNode(true);
                sphereDiv.setAttribute('id',m_hand_id);
                sphereDiv.style.backgroundColor='#'+Math.floor(Math.random()*16777215).toString(16);
                document.getElementById('scene').appendChild(sphereDiv);
                spheres[m_hand_id] = m_hand_id;
          } else {
            var sphereDiv =  document.getElementById(m_hand_id);
            if (typeof(sphereDiv) != 'undefined' && sphereDiv != null) {
              moveSphere(sphereDiv, posX, posY, posZ, rotX, rotY, rotZ);
            }
          }
          handIds[m_hand_id] = true; //現在認識している手のIDを格納

        }
        for (handId in spheres) {
          if (!handIds[handId]) {
            var sphereDiv =  document.getElementById(spheres[handId]);
            sphereDiv.parentNode.removeChild(sphereDiv);
            delete spheres[handId];
          }
        }

        for (var pointableId = 0, pointableCount = frame.pointables.length; pointableId != pointableCount; pointableId++) {
          var pointable = frame.pointables[pointableId];
		  var m_pointable_id = 'm'+pointable.id //IDにマスターハンドを示すmを付加
          var posX = (pointable.tipPosition[0]*3);
          var posY = (pointable.tipPosition[2]*3)-200;
          var posZ = (pointable.tipPosition[1]*3)-400;
          var dirX = -(pointable.direction[1]*90);
          var dirY = -(pointable.direction[2]*90);
          var dirZ = (pointable.direction[0]*90);
          var finger = fingers[m_pointable_id];
          if (!finger) {//何のためにあるのか・・・？
            var fingerDiv = document.getElementById("finger").cloneNode(true);
                fingerDiv.setAttribute('id',m_pointable_id);
                fingerDiv.style.backgroundColor='#'+Math.floor(Math.random()*16777215).toString(16);
                document.getElementById('scene').appendChild(fingerDiv);
                fingers[m_pointable_id] = m_pointable_id; //現在のfingerオブジェクトのidを連想配列で格納 
                        //ex:Object {14: 14, 33: 33, 34: 34, 59: 59, 76: 76}
          } else {//基本的にこちらへ遷移
            var fingerDiv =  document.getElementById(m_pointable_id);
            if (typeof(fingerDiv) != 'undefined' && fingerDiv != null) {
              moveFinger(fingerDiv, posX, posY, posZ, dirX, dirY, dirZ);
            }
          }
          fingerIds[m_pointable_id] = true;
        }
    
        for (fingerId in fingers) {//恐らくIDが取得できなくなったものを削除．
          if (!fingerIds[fingerId]) {
            var fingerDiv =  document.getElementById(fingers[fingerId]);
            fingerDiv.parentNode.removeChild(fingerDiv);
            delete fingers[fingerId];
          }
        }
      });


      d3.json("http://uectf.jp/member/kenji/leapmotion/data_json2.js", function(error, data) {
        simulateGesture(data);
      });
      /**************ここまで マスターハンド用********/

    
    
  /*******ここからユーザーハンド用*********/
    /**関数**/
    function move(node, posX, posY, posZ, rotX, rotY, rotZ) {
      var style = node.style;
    //print
    //console.log(node)
      style.transform =
      style.webkitTransform = 'translate3d(' + posX + 'px, ' + posY + 'px, ' + posZ + 'px) ' +
                              'rotate3d(1, 0, 0, ' + rotX + 'deg) rotate3d(0, 0, 1, ' + rotZ + 'deg)';
    }

    function getNode(id, templateNode) {
      var node  = pool[id];

      if (!node) {
        node  = templateNode.cloneNode(true);
        node.id = id;
        node.style.backgroundColor = randomColor();

        scene.appendChild(node);
        pool[id] = node;
      }

      return node;
    }

    function randomColor() {
      return '#' + Math.floor(Math.random() * 0x1000000).toString(16);
    }
  /**ここまで関数**/

    //グローバル変数
    var app = document.getElementById('app');
    var scene = document.getElementById('scene');
    var sphereTemplate = document.getElementById('sphere');
    var fingerTemplate = document.getElementById('finger');
    var pool = {}; //for id
  
/* takei added
  input:z軸方向加速度,指のid
  output:
    0:何もない状態
    1:tap
    2:up

  ｚ軸方向の負の加速度（下向き）がある一定の値(ACC)以上で、border付近（border_rangeの範囲）を移動したときtapしたとする。逆の時up。
  tapping_listはidをキーとし、1ならば押している状態、0ならば押していない状態を指す。個別の状態を見たい時はこれを参照すべし。
  tapping_countはidをキーとし、tap状態の回数を記録する。tapの回数が一定の数（CT）を超えた時、tapしたとする。up_countはその逆。


  現状の問題点
  位置合わせを行うモードを最初に作ったほうがいいかも
*/

    var tapping_list = new Array(10);
    var tapping_count = new Array(10);
    var border=0; //tapの基準の高さ
    var border_range=15; //基準の高さからの範囲
    var up_count = new Array(10);

    var ACC = 160;
    var CT = 5;

    function tap(accZ,posZ,id){
      if(accZ < (-1)*ACC && Math.abs(posZ)<border+border_range){
        tapping_count[id]++;
        if(tapping_count[id]>CT){
          tapping_list[id]=1;
          tapping_count[id]=0;
          console.log("tap:"+id+","+tapping_list[id]);
        }
        return 1;
      }else if(accZ > ACC || Math.abs(posZ)<border+border_range){
        up_count[id]++;
        if(up_count[id]>CT){
          tapping_list[id] = 0;
          up_count[id]=0;
          console.log("up:"+id+","+tapping_list[id]);
        }
          return 2;
        }else{
          tapping_count[id] = 0;
          up_count[id] = 0;
          return 0;
        }
    }

    /* piano関連の変数 */
    //開始位置、長さなどは鍵盤の大きさで調整
    var piano_key_nums=7; //pianoの鍵盤の数
    var piano=Array(piano_key_nums);  //pianoの状態を保持。0.何もない状態 1.再生中 2.再生終了
    var piano_key_Xlength=50;  //鍵盤の一つの横の長さ
    var piano_key_Ylength=100; //鍵盤一つの縦の長さ
    var piano_start_X=-250; //ピアノの開始位置x
    var piano_start_Y=-50; //ピアノの開始位置y 
    var piano_audio=Array(piano_key_nums);//音源の読み込み

    //最初に音源をすべて読み込ませる
    function audio_load(){
      for(var i=0;i<piano_key_nums*2;i++){
        piano_audio[i]=new Audio("./sound/"+(i+1)+".ogg");
      }
    }
    //音を鳴らす。なっている途中なら止めてから鳴らす
    function play_piano(num){
      if(piano[num]==1)stop_piano(num);
      piano_audio[num].play();
      piano[num]=1;
    }
    //音を止める。再生時間を最初に戻す
    function stop_piano(num){
      piano_audio[num].pause();
      piano_audio[num].currentTime = 0;
      piano[num]=0;
    }


  /****ここからループ***/
    Leap.loop(function(frame) { 
  //frameを生成していなくてもLeap.loopは使用可能
  //loop(callback) loopの第一引数にはコールバック関数が格納される．
  //The most recent {@link Frame} object is passed toyour callback function.
      var ids = {};
      var hands = frame.hands;
      var pointables = frame.pointables;

      for (var i = 0, hand; hand = hands[i++];) {
		var u_hand_id = 'u' + hand.id;
        var posX = (hand.palmPosition[0] * 3);
        var posY = (hand.palmPosition[2] * 3) - 200;
        var posZ = (hand.palmPosition[1] * 3) - 400;
        var rotX = (hand._rotation[2] * 90);
        var rotY = (hand._rotation[1] * 90);
        var rotZ = (hand._rotation[0] * 90);

        var node = getNode(u_hand_id, sphereTemplate); //今現在の<div class= hand or finger>オブジェクト1つを拾ってくる

        move(node, posX, posY, posZ, rotX, rotY, rotZ);

        ids[u_hand_id] = true;
      }

      for (var i = 0, pointable; pointable = pointables[i++];) {
		var u_pointable_id ='u'+pointable.id;
        var posX = (pointable.tipPosition[0] * 3);
        var posY = (pointable.tipPosition[2] * 3) - 200;
        var posZ = (pointable.tipPosition[1] * 3) - 400;
        var dirX = -(pointable.direction[1] * 90);
        var dirY = -(pointable.direction[2] * 90);
        var dirZ = (pointable.direction[0] * 90);

        node = getNode(u_pointable_id ,fingerTemplate);//特定のidのdivオブジェクト(node)を取得

        move(node, posX, posY, posZ, dirX, dirY, dirZ);//定のidのdivオブジェクト(node)をcssにより移動，描画

        //takei added
        acc = pointable.tipVelocity[1];
        

        //numは鍵盤の番号・黒鍵の時だけ位置を少しだけずらす
        num_y = piano_key_nums*Math.floor((posY-piano_start_Y)/piano_key_Ylength);
        if(num_y==1)num = Math.floor((posX-piano_start_X)/piano_key_Xlength ) * (num_y+1);
        else num = Math.floor((posX-piano_key_Xlength/2-piano_start_X)/piano_key_Xlength );//黒鍵の時

        tap_flg = tap(acc,posZ,pointable.id);

        if(num<piano_key_nums*2 && tap_flg==1){
          play_piano(num);
          console.log("posX:" + posX + " posY:" + posY + " posZ:"+posZ+" piano_num:"+num+"acc:"+acc);
          //鍵盤の色を変えるなどの処理をここに
          
        }
        
        //takei added

        ids[u_pointable_id] = true;
      }
    //takei added
      //音が鳴り終わったら止める
      for(var i=0;i<piano_key_nums;i++){
        piano_audio[i].addEventListener("ended",function(){
          piano[i]=2;
          stop_piano(i);
        },false);
      }
      //takei added
    //poolは現時点の<div class=finger,hand>オブジェクトをすべて格納している
    //出力 Object {11: div#11.cube finger, 15: div#15.cube sphere, 34: div#34.cube finger, 66: div#66.cube finger, 67: div#67.cube finger, 86: div#86.cube finger, 99: div#99.cube sphere}
      for (var id in pool) {//frameオブジェクトにないidがpoolにある場合，そのdivオブジェクトを削除
        if (!ids[id]) {
          scene.removeChild(pool[id]);
          delete pool[id];
        }
      }

      document.getElementById('showHands').addEventListener('click', function() {
        app.className = 'show-hands';
      }, false);
      document.getElementById('hideHands').addEventListener('click', function() {
        app.className = '';
      }, false);
    });
  /***ここまでループ***/
  /*******ここまでユーザーハンド用*********/
    
    </script>

</html>
